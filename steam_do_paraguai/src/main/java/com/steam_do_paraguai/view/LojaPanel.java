/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.steam_do_paraguai.view;

import com.steam_do_paraguai.exception.JogoException;
import com.steam_do_paraguai.model.Jogo;
import com.steam_do_paraguai.model.User;
import com.steam_do_paraguai.model.Usuario;
import com.steam_do_paraguai.persistence.Persistence;
import com.steam_do_paraguai.persistence.UsuarioPersistence;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lukas-freitas
 */
public class LojaPanel extends javax.swing.JPanel {

    private MenuPrincipal tela;
    private Persistence<Usuario> usuarioPersistence;
    private List<Usuario> lista;
    /**
     * Creates new form Loja
     */
    public LojaPanel(MenuPrincipal t) {
        this.tela = t;
        usuarioPersistence = new UsuarioPersistence();
        lista = usuarioPersistence.findAll();
        initComponents();
        DefaultTableModel model = (DefaultTableModel)this.shopTableGames.getModel();
        model.addRow(new Object[]{"Baldur's Gate","Jogo de rpg", 199});
        model.addRow(new Object[]{"Naruto storm","Jogo de naruto", 100});
        model.addRow(new Object[]{"Hades I","Jogo rogue like", 50});
        model.addRow(new Object[]{"Sparking zero","Jogo de dragon ball", 250});
        model.addRow(new Object[]{"Terraria","Jogo de sandbox", 10});
        model.addRow(new Object[]{"The sims 4","Jogo de simulação", 3000});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shopTable = new javax.swing.JScrollPane();
        shopTableGames = new javax.swing.JTable();
        searchShopField = new javax.swing.JTextField();
        addToCartButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(61, 122, 155));
        setMaximumSize(new java.awt.Dimension(708, 368));
        setMinimumSize(new java.awt.Dimension(708, 368));
        setPreferredSize(new java.awt.Dimension(708, 368));

        shopTableGames.setBackground(new java.awt.Color(221, 221, 221));
        shopTableGames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Descrição", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shopTableGames.getTableHeader().setReorderingAllowed(false);
        shopTable.setViewportView(shopTableGames);
        if (shopTableGames.getColumnModel().getColumnCount() > 0) {
            shopTableGames.getColumnModel().getColumn(0).setResizable(false);
            shopTableGames.getColumnModel().getColumn(1).setResizable(false);
            shopTableGames.getColumnModel().getColumn(2).setResizable(false);
        }

        searchShopField.setText("Pesquisar");

        addToCartButton.setText("Adicionar ao Carrinho");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(184, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchShopField, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(181, 181, 181))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addToCartButton)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(shopTable)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchShopField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                .addComponent(addToCartButton)
                .addGap(34, 34, 34))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addComponent(shopTable, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(74, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        int indexRow = this.shopTableGames.getSelectedRow();
        if(indexRow != -1)
        {
            String nome = this.shopTableGames.getValueAt(indexRow, 0).toString();
            String descricao = this.shopTableGames.getValueAt(indexRow, 1).toString();
            Float preco = Float.parseFloat(this.shopTableGames.getValueAt(indexRow, 2).toString());
            Jogo jogo = new Jogo();
            try{
                jogo.setNome(nome);
                jogo.setDescricao(descricao);
                jogo.setPreco(preco);
            }
            catch(JogoException e){
                throw new RuntimeException("Erro ao adicionar o jogo");
            }
            if(!verificaExistente(jogo))
            {
                  ((Usuario) this.tela.getUsuario()).getCarrinho().adicionaJogo(jogo);
                  usuarioPersistence.save(lista);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "O jogo já está presente na sua conta!");
            }

               
            
        }
    }//GEN-LAST:event_addToCartButtonActionPerformed

    private boolean verificaExistente(Jogo jogo)
    {
        List<Jogo> jogos = ((Usuario) this.tela.getUsuario()).getJogos();
        for(int i = 0; i<jogos.size();i+=1)
        {
            if(jogos.get(i).getNome().toLowerCase().equals(jogo.getNome().toLowerCase()))
            {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartButton;
    private javax.swing.JTextField searchShopField;
    private javax.swing.JScrollPane shopTable;
    private javax.swing.JTable shopTableGames;
    // End of variables declaration//GEN-END:variables
}
